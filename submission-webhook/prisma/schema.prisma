generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  token              String?
  password           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contestSubmissions ContestSubmission[]
  role               UserRole            @default(USER)
  submissions        Submission[]
  contestPoints      ContestPoints[]
}

model Contest {
  id                 String              @id @default(cuid())
  title              String
  description        String
  startTime          DateTime
  endTime            DateTime
  hidden             Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  submissions        Submission[]
  problems           ContestProblem[]
  contestSubmissions ContestSubmission[]
}

model ContestProblem {
  id        String
  contestId String
  problemId String
  contest   Contest  @relation(fields: [contestId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  index     Int
  solved    Int      @default(0)

  @@id([contestId, problemId])
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String
  hidden             Boolean             @default(false)
  slug               String              @unique
  solved             Int                 @default(0)
  difficulty         Difficulty
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  submissions        Submission[]
  contestSubmissions ContestSubmission[]
  contestProblems    ContestProblem[]
  defaultCodes       DefaultCode[]
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId Int
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])
  problemId  String
}

model Submission {
  id              String           @id @default(cuid())
  userId          String
  problemId       String
  languageId      Int
  code            String
  fullCode        String
  activeContestId String?
  status          SubmissionResult @default(PENDING)
  testCases       TestCase[]
  memory          Int?
  time            Float?
  activeContest   Contest?         @relation(fields: [activeContestId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  problem         Problem          @relation(fields: [problemId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  language        Language         @relation(fields: [languageId], references: [id])
}

model Language {
  id           Int           @id @default(autoincrement())
  name         String
  judge0Id     Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  defaultCodes DefaultCode[]
  submissions  Submission[]
}

model TestCase {
  id               String         @id @default(cuid())
  status           TestCaseResult @default(PENDING)
  index            Int
  submissionId     String
  submission       Submission     @relation(fields: [submissionId], references: [id])
  memory           Int?
  time             Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  judge0TrackingId String?        @unique
}

model ContestSubmission {
  id           String  @id @default(cuid())
  userId       String
  contestId    String
  problemId    String
  languageId   Int?
  submissionId String
  points       Int     @default(0)
  user         User    @relation(fields: [userId], references: [id])
  contest      Contest @relation(fields: [contestId], references: [id])
  problem      Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, contestId, problemId])
}

model ContestPoints {
  id        String @id @default(cuid())
  userId    String
  contestId String
  points    Int    @default(0)
  rank      Int?
  user      User   @relation(fields: [userId], references: [id])

  @@unique([userId, contestId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum TestCaseResult {
  AC
  FAILED
  TLE
  MLE
  COMPILATION_ERROR
  RUNTIME_ERROR
  PENDING
}

enum UserRole {
  ADMIN
  USER
}

enum SubmissionResult {
  AC
  FAILED
  PENDING
}
